<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_megaman_stand</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>3</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_megaman_stand</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Global variables.
globalvar dir, bulletcount, hit, invin;
//Movement and looking variables.
image_xscale = -1;
dir = 0;
image_speed = 0.150;
walkspeed = 0;
hit = 0;
invin = 0;
blink = 0;
climbing = false;
//Variables involving shooting.
shooting = false;
armup = 0;
armuplimit = 16;
//Variables concerning gravity.
canjump = true;
fallspeed = 0;
jumpspeed = 0;
jumping = false;
falling = false;
//Mega Buster variables.
bulletdir = -15;
burstover = 0;
burstcool = 0;
burstlimit = 3;
burstcount = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Movement.
left = keyboard_check(vk_left);
right = keyboard_check(vk_right);

if (left = true &amp;&amp; hit = 0 &amp;&amp; climbing = false)
{
if (shooting = false)
{
sprite_index = spr_megaman_walk;
}
dir = 180;
image_xscale = 1;
walkspeed += 0.1;
x -= walkspeed;
}
else if (right = true &amp;&amp; hit = 0 &amp;&amp; climbing = false)
{
if (shooting = false)
{
sprite_index = spr_megaman_walk;
}
dir = 0;
image_xscale = -1;
walkspeed += 0.1;
x += walkspeed;
}
else if (walkspeed != 0 &amp;&amp; climbing = false)
{
walkspeed -= 0.1;
}

if (left = false &amp;&amp; right = false) //When no movement keys are pressed.
{
switch (image_xscale)
{
case 1:
x -= walkspeed;
break;
case -1:
x += walkspeed;
break;
}
if (shooting = false &amp;&amp; hit = 0 &amp;&amp; climbing = false)
{
sprite_index = spr_megaman_stand;
}
else if (climbing = true)
{
sprite_index = spr_megaman_stand_climb;
}
}

if (walkspeed &gt; 1) //Walking speed limits.
walkspeed = 1;

if (walkspeed &lt; -1)
walkspeed = -1;

if (hit != 0) //When Mega Man gets hit.
{
image_speed = 0.3;
if (dir = 0)
{
x -= 0.4;
}
if (dir = 180)
{
x += 0.4;
}
climbing = false;
jumping = false;
sprite_index = spr_megaman_hit;
hit -= 1;
}
else
{
image_speed = 0.150;
}

if (invin != 0) //Mega Man's temp invinciblity.
{
image_alpha = 0.8;
blink += 1;
if (blink &lt; 2)
{
visible = false;
}
else 
{
visible = true;
}
invin -= 1;
}
else
{
image_alpha = 1;
}

if (blink &gt; 4)
blink = 0;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Shooting.
if (keyboard_check_pressed(ord("X")) &amp;&amp; burstover = 0 &amp;&amp; hit = 0)
{
if (burstcool = 0) //Time frame for how many bullets can appear in a "moment."
{
burstcool = 25;
}
if (burstcool != 0) //If Mega Man fires during that time frame, the Mega Buster becomes one bullet closer to overheating.
{
burstcount += 1;
}
armup = 0;
shooting = true;
instance_create(x + bulletdir,y,obj_busterBullet);
if (left = false &amp;&amp; right = false &amp;&amp; jumping = false)
{
sprite_index = spr_megaman_stand_shoot;
}
else
{
sprite_index = spr_megaman_walk_shoot;
}
}

//So you can see the arm up for a bit.
if (shooting = true)
armup += 1;

if (armup &gt; armuplimit)
{
armup = 0;
shooting = false;
}

if (dir = 0)
bulletdir = 15;
else if (dir = 180)
bulletdir = -15;

if (burstcool &gt; 0) //This decreases "burstcool."
burstcool -= 1;

if (burstover &gt; 0) //This decreases "burstover."
burstover -= 1;

if (burstcool = 0) //This resets the bullet count if not enough bullets are fired in the time frame.
{
burstcount = 0;
}

if (burstcount = burstlimit) //This is if the bullet count reaches the burst limit.
{
burstover = 15;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Falling and such.
if (!place_meeting(x,y + fallspeed + 2,obj_collideBlock) &amp;&amp; climbing = false)
{
if (jumping = false)
{
fallspeed += 0.2;
y += fallspeed;
falling = true;
}
if (hit = 0)
{
if (shooting = false)
{
sprite_index = spr_megaman_jump;
}
else
{
sprite_index = spr_megaman_jump_shoot;
}
}
}
else
{
if (falling = true) //Landing and such.
{
if (keyboard_check(ord("Z")) &amp;&amp; true)
{
canjump = false;
}
move_contact_all(270,20);
falling = false;
}
if (sprite_index = spr_megaman_jump_shoot)
{
if (walkspeed = 0)
{
sprite_index = spr_megaman_stand_shoot;
}
else
{
sprite_index = spr_megaman_walk_shoot;
}
}
if (keyboard_check_released(ord("Z")) &amp;&amp; canjump = false)
{
canjump = true;
}
jumpspeed = 5;
fallspeed = 0;
}

if (keyboard_check(ord("Z")) &amp;&amp; jumpspeed &gt; 0 &amp;&amp; falling = false &amp;&amp; canjump = true &amp;&amp; hit = 0 &amp;&amp; climbing = false) //Jumpin' and such.
{
jumping = true;
jumpspeed -= 0.25;
y -= jumpspeed;
}
else
{
jumping = false;
}

if (keyboard_check_released(ord("Z")) &amp;&amp; jumping = true)
{
canjump = false;
jumping = false;
fallspeed = 0;
}

if (fallspeed &gt; 8) //fallspeed limit.
fallspeed = 8;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Bumping your head on a block.
if (place_meeting(x,y - 1,obj_collideBlock))
{
jumping = false;
jumpspeed = 0;
y += 1;
}

//Bumping into blocks horizontally.
if (place_meeting(x - 2,y,obj_collideBlock))
{
left = false;
walkspeed = 0;
x += 1;
}

if (place_meeting(x + 2,y,obj_collideBlock))
{
right = false;
walkspeed = 0;
x -= 1;
}

//Everyone loves converyor belts!
if (place_meeting(x,y + 1,obj_belt_forward))
{
x += 0.8;
}

if (place_meeting(x,y + 1,obj_belt_backward))
{
x -= 0.8;
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//This is all things MetalAirMan stuff.
var bgcolor;
bgcolor = make_color_rgb(0,greenval,blueval);
background_color = bgcolor;

if (distance_to_object(obj_tubbyBlower) &lt; 113) //Tubby Blower mechanics based on distance in pixels.
x -= 0.5;

if (x &gt; 810 &amp;&amp; room = rm_metalair_stage) //The transition between the two backgrounds in the stage.
{
if (greenval &lt; 189)
{ 
greenval += 1;
}
if (blueval &lt; 253)
{
blueval += 2;
}
}
else if (x &lt; 810 &amp;&amp; room = rm_metalair_stage)
{
if (greenval &gt; 0)
{
greenval -= 1;
}
if (blueval &gt; 0)
{
blueval -= 2;
}
}



</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (place_meeting(x,y,obj_ladder)) //Jumping onto the ladder.
{
if (keyboard_check(vk_up) || keyboard_check(vk_down))
{
climbing = true;
}
}
else
{
climbing = false;
}
if (keyboard_check(vk_up) &amp;&amp; climbing = true) //Climbing up and down the ladder.
{
sprite_index = spr_megaman_climb;
y -= 0.5;
}
else if (keyboard_check(vk_down) &amp;&amp; climbing = true)
{
sprite_index = spr_megaman_climb;
y += 0.5;
}

if (climbing = true) //Making sure no external speed interrupts the climbing process.
{
image_speed = 0.05;
walkspeed = 0;
fallspeed = 0;
}

if (keyboard_check(ord("Z")) &amp;&amp; climbing = true) //Letting go of the ladder.
{
climbing = false;
jumping = false;
canjump = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="40">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>megamanhp = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_ext(sprite_index,image_index,round(x),round(y),image_xscale,image_yscale,0,image_blend,image_alpha);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
